// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: youversion.red.votd.api.model.youversion.ApiMovie.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

/// Auto-Generated from OpenAPI Spec

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Youversion_Red_Votd_Api_Model_Youversion_ApiMovieOrientation: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case portrait // = 0
  case landscape // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .portrait
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .portrait
    case 1: self = .landscape
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .portrait: return 0
    case .landscape: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Youversion_Red_Votd_Api_Model_Youversion_ApiMovieOrientation: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [Youversion_Red_Votd_Api_Model_Youversion_ApiMovieOrientation] = [
    .portrait,
    .landscape,
  ]
}

#endif  // swift(>=4.2)

struct Youversion_Red_Votd_Api_Model_Youversion_ApiMoviePublisher {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 = 0

  var name: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Youversion_Red_Votd_Api_Model_Youversion_ApiMovieBlurHash {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var video: String {
    get {return _video ?? String()}
    set {_video = newValue}
  }
  /// Returns true if `video` has been explicitly set.
  var hasVideo: Bool {return self._video != nil}
  /// Clears the value of `video`. Subsequent reads from it will return its default value.
  mutating func clearVideo() {self._video = nil}

  var publisherLogo: String {
    get {return _publisherLogo ?? String()}
    set {_publisherLogo = newValue}
  }
  /// Returns true if `publisherLogo` has been explicitly set.
  var hasPublisherLogo: Bool {return self._publisherLogo != nil}
  /// Clears the value of `publisherLogo`. Subsequent reads from it will return its default value.
  mutating func clearPublisherLogo() {self._publisherLogo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _video: String? = nil
  fileprivate var _publisherLogo: String? = nil
}

struct Youversion_Red_Votd_Api_Model_Youversion_ApiMovie {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: Int32 = 0

  var muxID: String {
    get {return _muxID ?? String()}
    set {_muxID = newValue}
  }
  /// Returns true if `muxID` has been explicitly set.
  var hasMuxID: Bool {return self._muxID != nil}
  /// Clears the value of `muxID`. Subsequent reads from it will return its default value.
  mutating func clearMuxID() {self._muxID = nil}

  var orientation: Youversion_Red_Votd_Api_Model_Youversion_ApiMovieOrientation = .portrait

  var publisher: Youversion_Red_Votd_Api_Model_Youversion_ApiMoviePublisher {
    get {return _publisher ?? Youversion_Red_Votd_Api_Model_Youversion_ApiMoviePublisher()}
    set {_publisher = newValue}
  }
  /// Returns true if `publisher` has been explicitly set.
  var hasPublisher: Bool {return self._publisher != nil}
  /// Clears the value of `publisher`. Subsequent reads from it will return its default value.
  mutating func clearPublisher() {self._publisher = nil}

  var blurhash: Youversion_Red_Votd_Api_Model_Youversion_ApiMovieBlurHash {
    get {return _blurhash ?? Youversion_Red_Votd_Api_Model_Youversion_ApiMovieBlurHash()}
    set {_blurhash = newValue}
  }
  /// Returns true if `blurhash` has been explicitly set.
  var hasBlurhash: Bool {return self._blurhash != nil}
  /// Clears the value of `blurhash`. Subsequent reads from it will return its default value.
  mutating func clearBlurhash() {self._blurhash = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _muxID: String? = nil
  fileprivate var _publisher: Youversion_Red_Votd_Api_Model_Youversion_ApiMoviePublisher? = nil
  fileprivate var _blurhash: Youversion_Red_Votd_Api_Model_Youversion_ApiMovieBlurHash? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Youversion_Red_Votd_Api_Model_Youversion_ApiMovieOrientation: @unchecked Sendable {}
extension Youversion_Red_Votd_Api_Model_Youversion_ApiMoviePublisher: @unchecked Sendable {}
extension Youversion_Red_Votd_Api_Model_Youversion_ApiMovieBlurHash: @unchecked Sendable {}
extension Youversion_Red_Votd_Api_Model_Youversion_ApiMovie: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "youversion.red.votd.api.model.youversion"

extension Youversion_Red_Votd_Api_Model_Youversion_ApiMovieOrientation: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "portrait"),
    1: .same(proto: "landscape"),
  ]
}

extension Youversion_Red_Votd_Api_Model_Youversion_ApiMoviePublisher: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ApiMoviePublisher"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.name) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Youversion_Red_Votd_Api_Model_Youversion_ApiMoviePublisher, rhs: Youversion_Red_Votd_Api_Model_Youversion_ApiMoviePublisher) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Youversion_Red_Votd_Api_Model_Youversion_ApiMovieBlurHash: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ApiMovieBlurHash"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "video"),
    2: .standard(proto: "publisher_logo"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._video) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._publisherLogo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._video {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._publisherLogo {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Youversion_Red_Votd_Api_Model_Youversion_ApiMovieBlurHash, rhs: Youversion_Red_Votd_Api_Model_Youversion_ApiMovieBlurHash) -> Bool {
    if lhs._video != rhs._video {return false}
    if lhs._publisherLogo != rhs._publisherLogo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Youversion_Red_Votd_Api_Model_Youversion_ApiMovie: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ApiMovie"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    5: .standard(proto: "mux_id"),
    2: .same(proto: "orientation"),
    3: .same(proto: "publisher"),
    4: .same(proto: "blurhash"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.id) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.orientation) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._publisher) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._blurhash) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._muxID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.id != 0 {
      try visitor.visitSingularInt32Field(value: self.id, fieldNumber: 1)
    }
    if self.orientation != .portrait {
      try visitor.visitSingularEnumField(value: self.orientation, fieldNumber: 2)
    }
    try { if let v = self._publisher {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._blurhash {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._muxID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Youversion_Red_Votd_Api_Model_Youversion_ApiMovie, rhs: Youversion_Red_Votd_Api_Model_Youversion_ApiMovie) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs._muxID != rhs._muxID {return false}
    if lhs.orientation != rhs.orientation {return false}
    if lhs._publisher != rhs._publisher {return false}
    if lhs._blurhash != rhs._blurhash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
